[{"D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\index.js":"1","D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\reportWebVitals.js":"2","D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\App.js":"3","D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\SortVisualizer\\SortVisualizer.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":243,"mtime":1606955820945,"results":"8","hashOfConfig":"6"},{"size":2885,"mtime":1606973331852,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1dc8737",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\index.js",[],["20","21"],"D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\reportWebVitals.js",[],"D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\App.js",[],"D:\\Desktop\\VSCode\\SortingAlgorithmsVisualizer\\src\\SortVisualizer\\SortVisualizer.jsx",["22"],"import React from 'react';\r\nimport \"./SortVisualizer.css\"\r\n\r\nconst NUMBER_OF_ELEMENTS = 300;\r\n\r\nexport default class SortVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray();\r\n  }\r\n\r\n  generateArray() {\r\n    const array = [];\r\n    \r\n    // Adds a number (NUMBER_OF_ELEMENTS) (number of array bars) of new integer values from 10 to 1000 to 'array'.\r\n    for (let i = 0; i < NUMBER_OF_ELEMENTS; i++) {\r\n      // Range set to see bars\r\n      // Minimum set to 10 to better visualize the bar (less thin)\r\n      array.push(getRandomInt(10, 500));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n\r\n  }\r\n\r\n  quickSort() {\r\n    \r\n  }\r\n\r\n  heapSort() {\r\n    \r\n  }\r\n\r\n  bubbleSort() {\r\n    \r\n  }\r\n\r\n  // testSortingAlgorithms() {\r\n  //   for (let i = 0; i < 100; i++) {\r\n  //     const array = [];\r\n  //     const length = getRandomInt(1, 1000);\r\n  //     for (let i = 0; i < length; i++) {\r\n  //       array.push(getRandomInt(-1000, 1000));\r\n  //     }\r\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  //     const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n   \r\n    // Array is mapped to 'divisions' named \"array-bar\"\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          //The height of the bar is set to the value of the element in 'array' in pixels.\r\n          //In react if you don't put a key property (in this case, 'idx') in values or elements that you render in an iterable, a warning will pop up.\r\n          <div className=\"array-bar\" key={idx} style={{height: `${value}px`}}>\r\n          </div>\r\n        ))}\r\n        \r\n        <button onClick={() => this.generateArray()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.testSortingAlgorithms()}>Test</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Retrieved from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":91,"column":10,"nodeType":"29","messageId":"30","endLine":91,"endColumn":24},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'arraysAreEqual' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]